---
description: Specific rules for writing javascript custom-elements
globs: **/custom-elements/**/*.js
---
# Custom Element Development Guidelines

These guidelines are intended to complement the general JavaScript rules. They focus on best practices for building robust, maintainable custom elements that work with the Light DOM, leverage event delegation, and maintain a clear separation between functionality and aesthetics.

---

## 1. DOM Management & Element Construction

-   **Avoid Shadow DOM:**  
    Do not use Shadow DOM on custom elements.

-   **Prefer Light DOM:**  
    Design custom elements to work with and enhance the existing Light DOM structure.  
    Handle any missing elements gracefully.

-   **Minimal DOM Manipulation:**  
    Refrain from frequently creating new DOM elements (via `document.createElement` or setting `innerHTML`). Instead, work with the HTML already present.

-   **Event Bubbling:**  
    Leverage native event bubbling to manage events and enable effective component communication.

---

## 2. Event Handling & Lifecycle Management

-   **Event Delegation:**

    -   Attach a single event listener to the custom element itself rather than to multiple child elements.
    -   Rely on event delegation and bubbling, ensuring that you always verify the event target and context before processing.

-   **Handler Binding & Lifecycle Methods:**

    -   Bind event handlers only when necessary (e.g., when they are used as callbacks outside the delegated context).
    -   Keep the constructor minimal. Perform setup tasks (including attaching event listeners) in the `connectedCallback` rather than in the constructor.

-   **Method Definitions:**  
    Define event handlers as regular class methods (avoid inline arrow functions) to ensure clarity and the proper `this` context.

---

## 3. Enhancement & Reactive Patterns

-   **Progressive Enhancement:**  
    Enhance the existing HTML structure instead of replacing it entirely. Provide sensible fallback behavior for users with JavaScript disabled.

-   **Custom Events & Data Attributes:**

    -   Emit custom events to notify parent elements about state changes.
    -   Use data attributes for configuration to maintain clear, semantic HTML.

-   **Reactive Patterns:**  
    Favor event-driven, reactive patterns over performing a one-time scan of the DOM during initialization.  
    Avoid caching DOM references as instance properties unless absolutely necessary; query the DOM on demand.

---

## 4. Coupling & Dependencies

-   **Maintain Loose Coupling:**  
    Keep custom elements independent of their children’s internal implementations.  
    React to events and attribute changes rather than directly manipulating child elements or assuming a fixed DOM structure.

---

## 5. File Structure & Asset Organization

Organize each custom element into three separate files to enforce a clear separation between functionality and aesthetics:

-   **JavaScript Implementation:**

    -   **File Name:** `[custom-element-name].js`
    -   **Purpose:** Contains the custom element definition, registration, and business logic.

-   **Functional UX Styling:**

    -   **File Name:** `[custom-element-name].ux.css`
    -   **Purpose:** Provides the essential CSS rules needed for the element’s operation and user interaction.

-   **Aesthetic Styling:**
    -   **File Name:** `[custom-element-name].style.css`
    -   **Purpose:** Contains visual styling rules that use custom properties and reference an external `base-style.css`. This separation allows users to adjust the look and feel without affecting the functional styles.
